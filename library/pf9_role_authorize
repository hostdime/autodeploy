#!/usr/bin/env python

import json
import time
import urlparse

try:
    import shade
    HAS_SHADE = True
except ImportError:
    HAS_SHADE = False

class RoleAuthorize(object):
    def __init__(self, module, cloud):
        self.module = module
        self.cloud = cloud

        identity_endpoint = urlparse(cloud.get_session_endpoint('identity'))
        self._resmgr_endpoint = "{0}://{1}/resmgr/v1".format(
            identity_endpoint.scheme,
            identity_endpoint.netloc
        )

        self.name = module.params['name']
        self.state = module.params['state']
        self.host_id = module.params['host_id']
        self.host_ip = module.params['host_ip']
        self.host_name = module.params['host_name']
        self.data = module.params['data']
        self.timeout = module.params['timeout']

    def _ensure_converged(self):
        url = ''.join([self._resmgr_endpoint, '/hosts/', self._get_host_id()])
        time.sleep(15)
        response = open_url(url, method="GET", headers=self._headers())
        host_info = json.loads(response.read())
        elapsed_time = 0
        success = True
        while host_info['role_status'] != 'ok':
            if elapsed_time > self.timeout:
                self.module.fail_json(
                    msg='Assigning role to host %s timed out: %d s' %
                    (self._get_host_id(), self.timeout)
                )
                success = False
                break
            time.sleep(15)
            elapsed_time += 15
            response = open_url(url, method="GET", headers=self._headers())
            host_info = json.loads(response.read())
        return success

    def _headers(self):
        return {
            'Content-Type':'application/json',
            'X-Auth-Token':self.cloud.auth_token
        }

    def remove(self):
        url = ''.join([self._resmgr_endpoint, '/hosts/', self._get_host_id(), '/roles/', self.name])
        open_url(url, method="DELETE", headers=self._headers(), data=json.dumps(self.data))
        converged = self._ensure_converged()
        if not converged:
            self.module.fail_json(msg='Role convergence timed out')

    def add(self):
        url = ''.join([self._resmgr_endpoint, '/hosts/', self._get_host_id(), '/roles/', self.name])

        open_url(url, method="PUT", headers=self._headers(), data=json.dumps(self.data))
        converged = self._ensure_converged()
        if not converged:
            self.module.fail_json(msg='Role convergence timed out')

    def _get_host_id(self):
        if self.host_id:
            return self.host_id

        url = '{0}/hosts'.format(self._resmgr_endpoint)
        resp = open_url(url, method="GET", headers=self._headers())
        host_id = None
        for host in json.loads(resp.read()):
            if self.host_name and host['info']['hostname'] == self.host_name:
                host_id = host['id']
                break
            elif self.host_ip and self.host_ip in host['extensions']['ip_address']['data']:
                host_id = host['id']
                break

        if host_id is not None:
            self.host_id = host_id

        return host_id

    def check(self):
        pass

    def run(self):

        try:
            host_id = self._get_host_id()
        except Exception, exp:
            self.module.fail_json(msg=str(exp))

        if not host_id:
            self.module.fail_json(msg='No host ID found.')

        try:
            if self.state == 'absent':
                self.remove()
            else:
                self.add()
        except Exception, exp:
            self.module.fail_json(msg=str(exp))

        self.module.exit_json(changed=True)

def main():
    """
    Authorizes a resmgr role for a given host
    """
    module = AnsibleModule(
        argument_spec=dict(
            name                = dict(required=True),
            state               = dict(default="present", choices=['present', 'absent']),
            auth                = dict(required=True, type='dict'),
            host_name           = dict(required=False),
            host_id             = dict(default=None),
            host_ip             = dict(required=False),
            data                = dict(default={}, required=False, type='dict'),
            timeout             = dict(default=600, type='int')
        ),
        supports_check_mode=False,
        mutually_exclusive=[
            ['host_id', 'host_name'],
            ['host_id', 'host_ip'],
            ['host_name', 'host_ip']
        ]
    )

    if not HAS_SHADE:
        module.fail_json(msg='shade is required for this module')

    try:
        auth_params = dict(module.params['auth'])
        cloud = shade.openstack_cloud(**auth_params)
    except shade.OpenStackCloudException as exp:
        module.fail_json(msg=str(exp), extra_data=exp.extra_data)

    role_auth = RoleAuthorize(module, cloud)
    if module.check_mode:
        role_auth.check()
    else:
        try:
            role_auth.run()
        except Exception, exp:
            module.fail_json(msg=str(exp))

from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.urls import *
if __name__ == '__main__':
    main()
